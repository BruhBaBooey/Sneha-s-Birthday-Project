{"ast":null,"code":"var _jsxFileName = \"E:\\\\My Projects\\\\sneha-birthday\\\\src\\\\Puzzle.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport confetti from 'canvas-confetti';\nimport './PuzzleGame.css';\nimport puzzleImage from './assets/puzzle-image.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pieceCount = 3;\nconst totalPieces = pieceCount * pieceCount;\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\nexport default function Puzzle() {\n  _s();\n  const [board, setBoard] = useState(Array(totalPieces).fill(null));\n  const [tray, setTray] = useState([]);\n  const [isComplete, setIsComplete] = useState(false);\n  useEffect(() => {\n    // Put all pieces shuffled into the tray on mount\n    setTray(shuffleArray([...Array(totalPieces).keys()]));\n  }, []);\n\n  // put checkCompletion inside useEffect to avoid warning\n  useEffect(() => {\n    const checkCompletion = () => {\n      const correct = board.every((piece, idx) => piece === idx);\n      if (correct && !isComplete) {\n        setIsComplete(true);\n        launchConfetti();\n      }\n    };\n    checkCompletion();\n  }, [board, isComplete]);\n  const launchConfetti = () => {\n    confetti({\n      particleCount: 150,\n      spread: 70,\n      origin: {\n        y: 0.6\n      }\n    });\n  };\n  const handleDrop = (targetIndex, source) => {\n    const {\n      from,\n      index\n    } = source;\n    if (from === 'tray') {\n      const piece = tray[index];\n      const newTray = [...tray];\n      newTray.splice(index, 1);\n      const newBoard = [...board];\n      newBoard[targetIndex] = piece;\n      setTray(newTray);\n      setBoard(newBoard);\n    } else if (from === 'board') {\n      const sourcePiece = board[index];\n      const targetPiece = board[targetIndex];\n      const newBoard = [...board];\n      newBoard[targetIndex] = sourcePiece;\n      newBoard[index] = targetPiece;\n      setBoard(newBoard);\n    }\n  };\n  const handleReturnToTray = boardIndex => {\n    const piece = board[boardIndex];\n    const newBoard = [...board];\n    newBoard[boardIndex] = null;\n    setBoard(newBoard);\n    setTray([...tray, piece]);\n  };\n  const onDragStart = (e, from, index) => {\n    e.dataTransfer.setData('text/plain', JSON.stringify({\n      from,\n      index\n    }));\n  };\n  const getBackgroundPosition = index => {\n    const x = index % pieceCount * (100 / (pieceCount - 1));\n    const y = Math.floor(index / pieceCount) * (100 / (pieceCount - 1));\n    return `${x}% ${y}%`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"puzzle-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"puzzle-title\",\n      children: \"\\uD83E\\uDDE9 Solve the Jigsaw\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"puzzle-board\",\n      children: board.map((pieceIndex, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"puzzle-slot\",\n        onDragOver: e => e.preventDefault(),\n        onDrop: e => {\n          const source = JSON.parse(e.dataTransfer.getData('text/plain'));\n          handleDrop(i, source);\n        },\n        children: pieceIndex !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"puzzle-piece\",\n          draggable: true,\n          onDragStart: e => onDragStart(e, 'board', i),\n          onDoubleClick: () => handleReturnToTray(i),\n          style: {\n            backgroundImage: `url(${puzzleImage})`,\n            backgroundSize: `${pieceCount * 100}%`,\n            backgroundPosition: getBackgroundPosition(pieceIndex)\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 15\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"puzzle-tray\",\n      children: tray.map((pieceIndex, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"puzzle-piece\",\n        draggable: true,\n        onDragStart: e => onDragStart(e, 'tray', i),\n        style: {\n          backgroundImage: `url(${puzzleImage})`,\n          backgroundSize: `${pieceCount * 100}%`,\n          backgroundPosition: getBackgroundPosition(pieceIndex)\n        }\n      }, pieceIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), isComplete && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"completion-message\",\n      children: \"\\uD83C\\uDF89 Puzzle Complete!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(Puzzle, \"JXLF8Qq/t6sVwvRB+C2yOrSGMF4=\");\n_c = Puzzle;\nvar _c;\n$RefreshReg$(_c, \"Puzzle\");","map":{"version":3,"names":["React","useState","useEffect","confetti","puzzleImage","jsxDEV","_jsxDEV","pieceCount","totalPieces","shuffleArray","array","i","length","j","Math","floor","random","Puzzle","_s","board","setBoard","Array","fill","tray","setTray","isComplete","setIsComplete","keys","checkCompletion","correct","every","piece","idx","launchConfetti","particleCount","spread","origin","y","handleDrop","targetIndex","source","from","index","newTray","splice","newBoard","sourcePiece","targetPiece","handleReturnToTray","boardIndex","onDragStart","e","dataTransfer","setData","JSON","stringify","getBackgroundPosition","x","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","pieceIndex","onDragOver","preventDefault","onDrop","parse","getData","draggable","onDoubleClick","style","backgroundImage","backgroundSize","backgroundPosition","_c","$RefreshReg$"],"sources":["E:/My Projects/sneha-birthday/src/Puzzle.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport confetti from 'canvas-confetti';\r\nimport './PuzzleGame.css';\r\nimport puzzleImage from './assets/puzzle-image.png';\r\n\r\nconst pieceCount = 3;\r\nconst totalPieces = pieceCount * pieceCount;\r\n\r\nfunction shuffleArray(array) {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n  return array;\r\n}\r\n\r\nexport default function Puzzle() {\r\n    const [board, setBoard] = useState(Array(totalPieces).fill(null));\r\n    const [tray, setTray] = useState([]);\r\n    const [isComplete, setIsComplete] = useState(false);\r\n\r\nuseEffect(() => {\r\n  // Put all pieces shuffled into the tray on mount\r\n  setTray(shuffleArray([...Array(totalPieces).keys()]));\r\n}, []);\r\n\r\n\r\n// put checkCompletion inside useEffect to avoid warning\r\nuseEffect(() => {\r\n  const checkCompletion = () => {\r\n    const correct = board.every((piece, idx) => piece === idx);\r\n    if (correct && !isComplete) {\r\n      setIsComplete(true);\r\n      launchConfetti();\r\n    }\r\n  };\r\n  checkCompletion();\r\n}, [board, isComplete]);\r\n\r\n\r\n  const launchConfetti = () => {\r\n    confetti({\r\n      particleCount: 150,\r\n      spread: 70,\r\n      origin: { y: 0.6 },\r\n    });\r\n  };\r\n\r\n  const handleDrop = (targetIndex, source) => {\r\n    const { from, index } = source;\r\n\r\n    if (from === 'tray') {\r\n      const piece = tray[index];\r\n      const newTray = [...tray];\r\n      newTray.splice(index, 1);\r\n\r\n      const newBoard = [...board];\r\n      newBoard[targetIndex] = piece;\r\n\r\n      setTray(newTray);\r\n      setBoard(newBoard);\r\n    } else if (from === 'board') {\r\n      const sourcePiece = board[index];\r\n      const targetPiece = board[targetIndex];\r\n      const newBoard = [...board];\r\n      newBoard[targetIndex] = sourcePiece;\r\n      newBoard[index] = targetPiece;\r\n      setBoard(newBoard);\r\n    }\r\n  };\r\n\r\n  const handleReturnToTray = (boardIndex) => {\r\n    const piece = board[boardIndex];\r\n    const newBoard = [...board];\r\n    newBoard[boardIndex] = null;\r\n    setBoard(newBoard);\r\n    setTray([...tray, piece]);\r\n  };\r\n\r\n  const onDragStart = (e, from, index) => {\r\n    e.dataTransfer.setData('text/plain', JSON.stringify({ from, index }));\r\n  };\r\n\r\n  const getBackgroundPosition = (index) => {\r\n    const x = (index % pieceCount) * (100 / (pieceCount - 1));\r\n    const y = Math.floor(index / pieceCount) * (100 / (pieceCount - 1));\r\n    return `${x}% ${y}%`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"puzzle-wrapper\">\r\n      <h2 className=\"puzzle-title\">ðŸ§© Solve the Jigsaw</h2>\r\n\r\n      <div className=\"puzzle-board\">\r\n        {board.map((pieceIndex, i) => (\r\n          <div\r\n            key={i}\r\n            className=\"puzzle-slot\"\r\n            onDragOver={(e) => e.preventDefault()}\r\n            onDrop={(e) => {\r\n              const source = JSON.parse(e.dataTransfer.getData('text/plain'));\r\n              handleDrop(i, source);\r\n            }}\r\n          >\r\n            {pieceIndex !== null && (\r\n              <div\r\n                className=\"puzzle-piece\"\r\n                draggable\r\n                onDragStart={(e) => onDragStart(e, 'board', i)}\r\n                onDoubleClick={() => handleReturnToTray(i)}\r\n                style={{\r\n                  backgroundImage: `url(${puzzleImage})`,\r\n                  backgroundSize: `${pieceCount * 100}%`,\r\n                  backgroundPosition: getBackgroundPosition(pieceIndex),\r\n                }}\r\n              />\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"puzzle-tray\">\r\n        {tray.map((pieceIndex, i) => (\r\n          <div\r\n            key={pieceIndex}\r\n            className=\"puzzle-piece\"\r\n            draggable\r\n            onDragStart={(e) => onDragStart(e, 'tray', i)}\r\n            style={{\r\n              backgroundImage: `url(${puzzleImage})`,\r\n              backgroundSize: `${pieceCount * 100}%`,\r\n              backgroundPosition: getBackgroundPosition(pieceIndex),\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      {isComplete && <p className=\"completion-message\">ðŸŽ‰ Puzzle Complete!</p>}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}